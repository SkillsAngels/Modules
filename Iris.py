version = (0, 0, 2)

# for more info: https://murix.ru/files/ftg
# by xadjilut, 2021

# –º–æ–¥—É–ª—å —á–∞—Å—Ç–∏—á–Ω–æ –Ω–µ –º–æ–π | This module is not half mine.

# _           _            _ _
# | |         | |          (_) |
# | |     _ | |_ _  _ _| | 
# | |    / _ \| / _ \/ | | |/ /
# | |_| (_) | || (_) \ \ |   <
# \_/\_/ \\_/|_/_|_|\_\
#
#              ¬© Copyright 2022
#
#         developed by @lotosiiik, @byateblan

# meta developer: @hikkaftgmods
# meta banner: https://te.legra.ph/file/a428776824470e0bdccb6.jpg
# meta pic: https://te.legra.ph/file/98192f1f7953275baead5.jpg

import random
from .. import loader, utils
from datetime import timedelta
from telethon import functions
from telethon.tl.types import Message


@loader.tds
class IrisMod(loader.Module):
    """–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –∫–æ–∏–Ω–æ–≤ –≤ –∏—Ä–∏—Å–±–æ—Ç–µ"""

    strings = {
        "name": "Iris",
        "farmon": "<i>‚úÖ–û—Ç–ª–æ–∂–µ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –∞–≤—Ç–æ—Ñ–∞—Ä–º–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω, –≤—Å—ë –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥...</i>",
        "farmon_already": "<i>–£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ</i>",
        "farmoff": "<i>‚ùå–ê–≤—Ç–æ—Ñ–∞—Ä–º–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n‚ò¢Ô∏è–ù–∞–¥—é–ø–∞–Ω–æ:</i> <b>%coins% i¬¢</b>",
        "farm": "<i>‚ò¢Ô∏è–ù–∞–¥—é–ø–∞–Ω–æ:</i> <b>%coins% i¬¢</b>",
    }

    def __init__(self):
        self.name = self.strings["name"]

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.myid = (await client.get_me()).id
        self.iris = 5443619563

    async def farmoncmd(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Ñ–∞—Ä–º–∏–Ω–≥"""
        status = self.db.get(self.name, "status", False)
        if status:
            return await message.edit(self.strings["farmon_already"])
        self.db.set(self.name, "status", True)
        await self.client.send_message(
            self.iris, "–§–∞—Ä–º–∞", schedule=timedelta(seconds=20)
        )
        await message.edit(self.strings["farmon"])

    async def farmoffcmd(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ—Ñ–∞—Ä–º–∏–Ω–≥"""
        self.db.set(self.name, "status", False)
        coins = self.db.get(self.name, "coins", 0)
        if coins:
            self.db.set(self.name, "coins", 0)
        await message.edit(self.strings["farmoff"].replace("%coins%", str(coins)))

    async def farmcmd(self, message):
        """–í—ã–≤–æ–¥ –∫–æ–ª-–≤–∞ –∫–æ–∏–Ω–æ–≤, –¥–æ–±—ã—Ç—ã—Ö —ç—Ç–∏–º –º–æ–¥—É–ª–µ–º"""
        coins = self.db.get(self.name, "coins", 0)
        await message.edit(self.strings["farm"].replace("%coins%", str(coins)))

    async def watcher(self, event):
        if not isinstance(event, Message):
            return
        chat = utils.get_chat_id(event)
        if chat != self.iris:
            return
        status = self.db.get(self.name, "status", False)
        if not status:
            return
        if event.raw_text == "–§–∞—Ä–º–∞":
            return await self.client.send_message(
                self.iris, "–§–∞—Ä–º–∞", schedule=timedelta(minutes=random.randint(1, 20))
            )
        if event.sender_id != self.iris:
            return
        if "–ù–ï–ó–ê–ß–Å–¢!" in event.raw_text:
            args = [int(x) for x in event.raw_text.split() if x.isnumeric()]
            randelta = random.randint(20, 60)
            if len(args) == 4:
                delta = timedelta(
                    hours=args[1], minutes=args[2], seconds=args[3] + randelta
                )
            elif len(args) == 3:
                delta = timedelta(minutes=args[1], seconds=args[2] + randelta)
            elif len(args) == 2:
                delta = timedelta(seconds=args[1] + randelta)
            else:
                return
            sch = (
                await self.client(
                    functions.messages.GetScheduledHistoryRequest(self.iris, 1488)
                )
            ).messages
            await self.client(
                functions.messages.DeleteScheduledMessagesRequest(
                    self.iris, id=[x.id for x in sch]
                )
            )
            return await self.client.send_message(self.iris, "–§–∞—Ä–º–∞", schedule=delta)
        if "–ó–ê–ß–Å–¢" in event.raw_text or "–£–î–ê–ß–ê" in event.raw_text:
            args = event.raw_text.split()
            for x in args:
                if x[0] == "+":
                    return self.db.set(
                        self.name,
                        "coins",
                        self.db.get(self.name, "coins", 0) + int(x[1:]),
                    )
                    
    async def message_q(
        self,
        text: str,
        user_id: int,
        mark_read: bool = False,
        delete: bool = False,
    ):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
        async with self.client.conversation(user_id) as conv:
            msg = await conv.send_message(text)
            response = await conv.get_response()
            if mark_read:
                await conv.mark_read()

            if delete:
                await msg.delete()
                await response.delete()

            return response
    
    @loader.command()
    async def give(self, message):
        """–ü–µ—Ä–µ–¥–∞–µ—Ç –∏—Ä–∏—Å–∫–∏/–≥–æ–ª–¥ –Ω–∞ –¥—Ä—É–≥–æ–π –∞–∫–∫"""
        bot = "@iris_black_bot"
        args = utils.get_args_raw(message)
        nmb = int(args.split(' ')[1])
        player = args.split(' ')[2]
        dada = ''
        if args.split(' ')[0] == "–≥–æ–ª–¥":
            dada = ' –≥–æ–ª–¥'
        elif args.split(' ')[0] == "–∏—Ä–∏—Å–∫–∏" or args[0] == "–∏—Ä–∏—Å":
            dada = ''
        else:
            return await utils.answer(message, '‚ùå| –û—à–∏–±–∫–∞,—á—Ç–æ-–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –∏—Ä–∏—Å–∫–∏ –∏–ª–∏ –≥–æ–ª–¥.')
    
        text = f'–ü–µ—Ä–µ–¥–∞—Ç—å{dada} {nmb} {player}'
        try:
            text += f'\n{args.split(" | ")[1]}'
        except IndexError:
            pass

        givs = await self.message_q(text,
            bot,
            mark_read=True,
            delete=True,
        )

        await utils.answer(message, givs.text)
            
    @loader.command()
    async def bagcmd(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à –º–µ—à–æ–∫"""
        
        bot = "@iris_black_bot"
        bags = await self.message_q("–ú–µ—à–æ–∫", bot, delete=True,)
        
        args = utils.get_args_raw(message)
        
        if not args:
            await utils.answer(message, bags.text)
    
    async def irishcmd(self, message):
        """–ü–æ–º–æ—â—å –ø–æ –º–æ–¥—É–ª—é Iris"""
        ihelp = "üçÄ| <b>–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n\n .farmon - –í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ —Ñ–∞—Ä–º.\n .farmoff - –í—ã–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ —Ñ–∞—Ä–º.\n .farm - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤—ã –Ω–∞—Ñ–∞—Ä–º–∏–ª–∏.\n .bag - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à –º–º–µ—à–æ–∫\n .give - –ø–µ—Ä–µ–¥–∞—ë—Ç –∏—Ä–∏—Å–∫–∏/–≥–æ–ª–¥\n\n <b>–ü—Ä–∏–º–µ—Ä:</b>\n .give {–∏—Ä–∏—Å–∫–∏ –∏–ª–∏ –≥–æ–ª–¥} {—á–∏—Å–ª–æ} {—é–∑–µ—Ä}. - –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã.\n .give {–∏—Ä–∏—Å–∫–∏ –∏–ª–∏ –≥–æ–ª–¥} {—á–∏—Å–ª–æ} {—é–∑–µ—Ä} | {–ø—Ä–∏—á–∏–Ω–∞}"
        await utils.answer(message, ihelp)
