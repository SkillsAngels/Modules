import contextlib

__version__ = (0, 0, 2)

# _           _            _ _
# | |         | |          (_) |
# | |     ___ | |_ ___  ___ _| | __
# | |    / _ \| __/ _ \/ __| | |/ /
# | |___| (_) | || (_) \__ \ |   <
# \_____/\___/ \__\___/|___/_|_|\_\
#
#              ¬© Copyright 2022
#
#         developed by @lotosiiik, @byateblan

# ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ    ‚ñÑ‚ñÄ‚ñà ‚ñÄ‚ñà‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñÑ‚ñÄ‚ñà
# ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà ‚ñÑ  ‚ñà‚ñÄ‚ñà  ‚ñà  ‚ñà‚ñÄ‚ñà ‚ñà ‚ñÄ ‚ñà ‚ñà‚ñÄ‚ñà
#
# üîí Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta developer: @hikkaftgmods
# meta banner: https://i.imgur.com/2KZ38Pv.jpeg
# meta pic: https://i.imgur.com/QntqxyH.jpeg

import logging
import re
import asyncio
from .. import loader, utils
from telethon.tl.types import Message


logger = logging.getLogger(__name__)


@loader.tds
class IrisLabMod(loader.Module):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∞–±/–∂–µ—Ä—Ç–≤. –í–æ–∑–º–æ–∂–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ-—Ü–∏–∏"""

    strings = {
        "name": "IrisLab",
        "saved": "üíæ <b>–ó–∞–º–µ—Ç–∫–∞ —Å –∏–º–µ–Ω–µ–º </b><code>{}</code><b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>.",
        "no_reply": "üö´ <b>–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–ø–ª–∞–π –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–º–µ—Ç–∫–∏.</b>",
        "no_name": "üö´ <b>–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∑–∞–º–µ—Ç–∫–∏.</b>",
        "no_note": "üö´ <b>–î–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</b>",
        "available_notes": "üíæ <b>–¢–µ–∫—É—â–∏–µ –∑–∞–º–µ—Ç–∫–∏:</b>\n",
        "no_notes": "üòî <b>–£ —Ç–µ–±—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫</b>",
        "deleted": "üôÇ <b>–ó–∞–º–µ—Ç–∫–∞ —Å –∏–º–µ–Ω–µ–º </b><code>{}</code> <b>—É–¥–∞–ª–µ–Ω–∞</b>",
        "lab_data": {
            "d": "(.*) –î–æ—Å—å–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ (.*)",
            "s": "(.*) –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: (.*)",
            "—Å": "(.*) –í —Å–æ—Å—Ç–∞–≤–µ –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ (.*)",
            "n": "(.*) –ò–º—è –ø–∞—Ç–æ–≥–µ–Ω–∞: (.*)",
            "p": "(.*) –ì–æ—Ç–æ–≤—ã—Ö –ø–∞—Ç–æ–≥–µ–Ω–æ–≤: (.*) –∏–∑ (.*)",
            "q": "(.*) –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è —É—á—ë–Ω—ã—Ö: (.*)",
            "np": "(.*) –ù–æ–≤—ã–π –ø–∞—Ç–æ–≥–µ–Ω: (.*)",
            "inf": "(.*) –ó–∞—Ä–∞–∑–Ω–æ—Å—Ç—å: (.*)",
            "imn": "(.*) –ò–º–º—É–Ω–∏—Ç–µ—Ç: (.*)",
            "m": "(.*) –õ–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å: (.*)",
            "ss": "(.*) –°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: (.*)",
            "be": "(.*) –ë–∏–æ-–æ–ø—ã—Ç: (.*)",
            "br": "(.*) –ë–∏–æ-—Ä–µ—Å—É—Ä—Å: (.*)",
            "so": "(.*) –°–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–π: (.*)",
            "prev": "(.*) –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω—ã: (.*)",
            "i": "(.*) –ó–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö: (.*)",
            "dis": "(.*) –°–≤–æ–∏—Ö –±–æ–ª–µ–∑–Ω–µ–π: (.*)",
            "f": "<b> –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏",
        },
    }

    async def client_ready(self, client, db):
        db.set("Iris", "chat_biowar", "@iris_black_bot")

        self.client = client
        self.db = db
        self._notes = self.get("victims_list", {})

    async def message_q(
        self,
        text: str,
        user_id: int,
        mark_read: bool = False,
        delete: bool = False,
    ):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
        async with self.client.conversation(user_id) as conv:
            msg = await conv.send_message(text)
            response = await conv.get_response()
            if mark_read:
                await conv.mark_read()

            if delete:
                await msg.delete()
                await response.delete()

            return response

    async def labcmd(self, message):
        """–ú–æ–¥—É–ª—å –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞—Å—Ç –≤–∞–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–µ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ (–ª–∞–±)"""
        bot = "@iris_black_bot"
        lab = await self.message_q(".–õ–∞–±", bot, mark_read=True, delete=True)
        args_raw = utils.get_args_raw(message)
        if not args_raw:
            return await utils.answer(message, lab.text)

        data, text = self.strings("lab_data"), []
        flags = "".join(args_raw.split(" ")).split("-")
        if "" in flags:
            flags.remove("")
        for flag in flags:
            search = re.search(data[flag], lab.text) if flag in data else None
            if search:
                if flag == "be":
                    num = search.group().split(":")[-1].replace(" ", "")
                    if num[-1] == "k":
                        num = (
                            int(num[:-1].replace(",", "")) * 100 / 100 * 10
                            if "," in num
                            else int(num[:-1]) * 1000 / 100 * 10
                        )
                    elif num[:-1] != "k":
                        num = int(num) / 100 * 10
                    text.append(f"{search.group()} | {num}")
                elif flag == "d":
                    text.append(search.group()[:-1])
                else:
                    text.append(search.group())
            elif flag == "parametrs":
                text = """
d: –ò–º—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
s: –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
—Å: –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è

n: –ò–º—è –ø–∞—Ç–æ–≥–µ–Ω–∞
p: –ì–æ—Ç–æ–≤—ã—Ö –ø–∞—Ç–æ–≥–µ–Ω–æ–≤
q: –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è —É—á—ë–Ω—ã—Ö üë®‚Äçüî¨
np: –ù–æ–≤—ã–π –ø–∞—Ç–æ–≥–µ–Ω —á–µ—Ä–µ–∑... ‚è±

inf: –ó–∞—Ä–∞–∑–Ω–æ—Å—Ç—å 
imn: –ò–º–º—É–Ω–∏—Ç–µ—Ç üõ°Ô∏è
m: –õ–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å ‚ò†Ô∏è
ss: –°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ 

be: –ë–∏–æ-–æ–ø—ã—Ç ‚ò£Ô∏è
br: –ë–∏–æ-—Ä–µ—Å—É—Ä—Å üß¨
so: –°–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–π üò∑
prev: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω—ã ü•Ω

i: –∑–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö ü§í
dis: –°–≤–æ–∏—Ö –±–æ–ª–µ–∑–Ω–µ–π ü§í

f: –ì–æ—Ä—è—á–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è 
v: –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–µ–º–∏—è(–µ–∂–∞) üí∏"""
                return await utils.answer(message, text)
            elif flag == "v":
                await asyncio.sleep(3)
                bot = "@iris_black_bot"
                victims = await self.message_q(
                    "–ú–æ–∏ –∂–µ—Ä—Ç–≤—ã", bot , mark_read=True, delete=True
                )
                result = re.search(
                    r"""(.*) –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–µ–º–∏—è: (.*)""", victims.text
                ).group()
                text.append(result)
            elif flag in data:
                app_text = (
                    "‚úÖ –í—Å–µ –ø–∞—Ç–æ–≥–µ–Ω—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω—ã" if flag == "np" else "‚ùå –ì–æ—Ä—è—á–∫–∏ –Ω–µ—Ç—É"
                )
                text.append(app_text)
            else:
                text.append(f"–ü–∞—Ä–∞–º–µ—Ç—Ä -{flag} –Ω–µ —É–∫–∞–∑–∞–Ω.")
            return await utils.answer(message, "\n".join(text))

    async def victimscmd(self, message):
        """–ö–æ–º–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à–∏ –∂–µ—Ä—Ç–≤—ã"""
        bot = "@iris_black_bot"
        victims = await self.message_q(
            "–ú–æ–∏ –∂–µ—Ä—Ç–≤—ã",
            bot,
            mark_read=True,
            delete=True,
        )

        args_raw = utils.get_args_raw(message)

        if not args_raw:
            await utils.answer(message, victims.text)

    async def upgcmd(self, message):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∑/–∏–º—É–Ω –∏ —Ç–¥.–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å(–ü—Ä–∏–º–µ—Ä) .upg –ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å (—á–∏—Å–ª–æ 1-5)"""
        args = utils.get_args(message)
        bot = "@iris_black_bot"
        characteristics = (
            "–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å",
            "–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å",
            "–∏–º–º—É–Ω–∏—Ç–µ—Ç",
            "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
            "–ø–∞—Ç–æ–≥–µ–Ω",
        )
        if len(args) != 2:
            await utils.answer(message, "–£–∫–∞–∑–∞–Ω–æ –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ –¥–≤—É—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        elif args[0].lower() not in characteristics:
            await utils.answer(message, "–î–∞–Ω–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        elif not args[1].isdigit():
            await utils.answer(message, "–í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º")
        elif int(args[1]) > 5 or int(args[1]) < 0:
            await utils.answer(message, "–£—Ä–æ–≤–µ–Ω—å —É–∫–∞–∑–∞–Ω –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        else:
            upgrade = await self.message_q(
            f"++{args[0].lower()} {args[1]}",
            bot,
            mark_read=True,
            delete=True,
        )

            args_raw = utils.get_args_raw(message)

            if not args_raw:
                await utils.answer(message, upgrade.text)

    async def gcmd(self, message: Message):
        """<name> - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings("no_name"))
            return

        asset = self._get_note(args)
        if not asset:
            await utils.answer(message, self.strings("no_note"))
            return

        await self._client.send_message(
            message.peer_id,
            await self._db.fetch_asset(asset["id"]),
            reply_to=getattr(message, "reply_to_msg_id", False),
        )

        if message.out:
            await message.delete()

    async def svcmd(self, message):
        """<name> - –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
        args = utils.get_args_raw(message)
        folder = "victims_list"

        reply = await message.get_reply_message()
        if not (reply and args):
            await utils.answer(message, self.strings("no_reply"))
            return
        if folder not in self._notes:
            self._notes[folder] = {}
            logger.warning(f"Created new folder {folder}")

        asset = await self._db.store_asset(reply)

        type_ = "‚ò£Ô∏è"

        self._notes[folder][args] = {"id": asset, "type": type_}

        self.set("victims_list", self._notes)

        await utils.answer(message, self.strings("saved").format(args, folder))

    def _get_note(self, name: str):
        for notes in self._notes.values():
            for note, asset in notes.items():
                if note == name:
                    return asset

    def _del_note(self, name: str):
        for category, notes in self._notes.copy().items():
            for note in notes.copy():
                if note == name:
                    del self._notes[category][note]

                if not self._notes[category]:
                    del self._notes[category]

                self.set("victims_list", self._notes)
                return True

        return False

    async def dcmd(self, message: Message):
        """<name> - —É–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings("no_name"))
            return

        asset = self._get_note(args)
        if not asset:
            await utils.answer(message, self.strings("no_note"))
            return

        with contextlib.suppress(Exception):
            await (await self._db.fetch_asset(asset["id"])).delete()

        self._del_note(args)

        await utils.answer(message, self.strings("deleted").format(args))

    async def listcmd(self, message: Message):
        """[folder] - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏"""
        args = utils.get_args_raw(message)

        if not self._notes:
            await utils.answer(message, self.strings("no_notes"))
            return

        result = self.strings("available_notes")
        if not args or args not in self._notes:
            for category, notes in self._notes.items():
                result += f"\nüî∏ <b>{category}</b>\n"
                for note, asset in notes.items():
                    result += f"    {asset['type']} <code>{note}</code>\n"

            await utils.answer(message, result)
            return

        for note, asset in self._notes[args].items():
            result += f"{asset['type']} <code>{note}</code>\n"

        await utils.answer(message, result)

    async def iccmd(self, message: Message):
        """–ö–æ–º–º–∞–Ω–¥–∞ –∫–æ—Ç—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Å–∫–æ–ª—å–∫–æ üß¨–ë–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤ –∏–ª–∏ –∂–µ ic‚ò£Ô∏è –Ω—É–∂–Ω–æ\n–ü—Ä–∏–º–µ—Ä: .ic <—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞> <—É—Ä–æ–≤–µ–Ω—å –°> <—É—Ä–æ–≤–µ–Ω—å –î–æ>"""
        args = utils.get_args(message)
        if not args or len(args) != 3 or not args[1].isdigit() or not args[2].isdigit() or args[2] <= args[1]:
            await utils.answer(
                message, "üö´| <b>–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞–ø–∏—à–∏—Ç–µ .ic <–Ω–∞–≤—ã–∫> <—É—Ä–æ–≤–µ–Ω—å –°> <—É—Ä–æ–≤–µ–Ω—å –î–æ></b>"
            )
            return

        skill, from_lvl, to_lvl = args
        from_lvl, to_lvl = int(from_lvl), int(to_lvl)
        amount = (
            await self._client.inline_query(
                "@hikkaftgbot", f"{skill}#{from_lvl}#{to_lvl}"
            )
        )[0].title

        if not amount.isdigit():
            await utils.answer(message, amount)
            return
        
        amount = f"{int(amount):,}".replace(",", " ")

        await utils.answer(
            message,
            f"üçÄ| –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞–≤—ã–∫ ¬´{skill}¬ª —Å {from_lvl} –¥–æ {to_lvl} —É—Ä–æ–≤–Ω—è"
            f" –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è: {amount} –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤üß¨ –∏–ª–∏ –∂–µ ic‚ò£Ô∏è",
        )

    async def listcmd(self, message):
        """–ü–æ–º–æ—â—å –ø–æ –∏—Ä–∏—Å –ª–∞–±—É."""
        
        hi = 'üçÄ| <b>–§–ª–∞–≥–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —É–∑–Ω–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —á–∞—Å—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏:</b>\n\n"d": "–î–æ—Å—å–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ ",\n"s": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: ",\n"—Å": "–í —Å–æ—Å—Ç–∞–≤–µ –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ ",\n"n": "–ò–º—è –ø–∞—Ç–æ–≥–µ–Ω–∞: ",\n"p": "–ì–æ—Ç–æ–≤—ã—Ö –ø–∞—Ç–æ–≥–µ–Ω–æ–≤: ",\n"q": "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è —É—á—ë–Ω—ã—Ö: ",\n"np": "–ù–æ–≤—ã–π –ø–∞—Ç–æ–≥–µ–Ω: ",\n"inf": "–ó–∞—Ä–∞–∑–Ω–æ—Å—Ç—å: ",\n"imn": "–ò–º–º—É–Ω–∏—Ç–µ—Ç: ",\n"m": "–õ–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å: ",\n"ss": "–°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ",\n"be": "–ë–∏–æ-–æ–ø—ã—Ç: ",\n"br": "–ë–∏–æ-—Ä–µ—Å—É—Ä—Å: ",\n"so": " –°–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–π: ",\n"prev": " –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω—ã: ",\n"i": " –ó–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö: ",\n"dis": "–°–≤–æ–∏—Ö –±–æ–ª–µ–∑–Ω–µ–π: ",\n"f": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏"\n\n <b>–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–ª–∞–≥–æ–≤: .lab v or .lab np</b>'
        
        await utils.answer(message, f"{hi}")
